[[{"l":"Contributing Guide to Kipes SDK","p":["Thank you for considering contributing to the Kipes SDK! We appreciate all the help we can get from the community. This guide will help you get started with contributing to this project.","You can contribute in many ways:","Report a Bug If you find a bug in the code, please report it as an issue. When creating an issue, please provide a clear description of the bug and steps to reproduce it.","Suggest a new Feature If you have an idea for a new feature or improvement to the project, please suggest it as an issue. When creating the issue, please provide a clear description of the feature or improvement and why you think it would be useful. The maintainers will review your suggestion and provide feedback on whether it aligns with the project's goals and priorities. If your suggestion is approved, you are welcome to implement it yourself by following the guidelines for submitting a pull request.","Submit a Pull Request If you want to contribute code to the project, please submit a pull request. Before submitting a pull request, please make sure that your code adheres to the project's coding standards and that you have added appropriate tests and updated the documentation as necessary.","This project uses the fork-and-pull Git workflow. This means that you will need to fork the repository and create a new branch for your changes. Once you have made your changes and committed them to your branch, you can submit a pull request to the original repository. For more information on the fork-and-pull Git workflow, please see fork-and-pull.","Become a Maintainer Maintainers are responsible for reviewing and merging pull requests, managing issues, and ensuring that the project is up to date and running smoothly. If you are interested in becoming a maintainer, please contact [maintainers@kipe.io]."]},{"l":"Code of Conduct","p":["This project follows the Contributor Covenant Code of Conduct. By participating in this project, you are expected to uphold this code. Please report any unacceptable behavior to [maintainers@kipe.io]."]},{"l":"License","p":["This project is licensed under the LGPL v3 License. By contributing to this project, you agree to license your contributions under the same license."]},{"l":"Github Reference Environment"}],[{"i":"adr-genericrecord-field-names","l":"ADR: GenericRecord Field Names"},{"l":"Context","p":["GenericRecords field names are not scoped or in any case public or private; everyone can define and access them. User-defined fields and SDK-defined fields coexist.","That means that there's a possibility that an user and a SDK fields clash in a sense that either users or the SDK overwrite fields defined by the other just because both use the same field name.","This ADR defines a field name strategy for all constructs of the Kipes SDK so that","users are aware of the used fields of the SDK","SDK developers have a guideline to name fields they need to establish"]},{"l":"Decision"},{"l":"Field Name Strategy","p":["Description","Field Name RegExpr","Field Type","Fields established in the context of a specific SDK construct and intended for further processing by the user.","Fields established in the context of a specific SDK construct and intended for internal processing at the related construct. InternalFields may be accessed by other SDK constructs or the user.","Furthermore, InternalFields must reference their host construct in the fieldName so that multiple SDK constructs can use the same internal field:","InternalField","InternalFieldName := _[A-Za-z0-9.-_]*","InternalFieldName := _{constructName}_{fieldName}","SDKField","SDKFieldName := [A-Za-z0-9][A-Za-z0-9.-_]*","The constructName might be further sub-constructed as needed by the SDK construct. Typically, the constructName equals the SDKFieldName","These are all the fields the User defines.","UserField","UserFieldName := [A-Za-z0-9][A-Za-z0-9.-_]*","We define three field types and the format the field names must adhere to:"]},{"l":"Renaming of SDKFields","p":["Users must be able to rename SDKFields. A typical use-case is that the same SDK construct is used multiple times. If the user renames a SDKField then that new name must be used to build the constructName of related InternalFields."]},{"l":"Examples","p":["userId created_at 1-first-field","_avg_sum_avg_count_ema_listOfElements","Each SDK construct that introduces fields into a GenericRecord must document these at the class javadoc.","The documentation must include:","the field name","the field type","the semantics of the field","in case of SDKFields: how the user can rename the field"]}]]